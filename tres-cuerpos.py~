import numpy as np
import scipy.integrate as spi

# Definir la función que describe el sistema de ecuaciones diferenciales
def f(t, y):
    G = 6.67430e-11  # Constante gravitatoria
    m1, m2, m3 = 1, 1, 1  # Masas de los cuerpos
    x1, y1, vx1, vy1, x2, y2, vx2, vy2, x3, y3, vx3, vy3 = y  # Posiciones y velocidades iniciales de los cuerpos

    # Distancias entre los cuerpos
    r12 = np.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    r13 = np.sqrt((x1 - x3) ** 2 + (y1 - y3) ** 2)
    r23 = np.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2)

    # Aceleraciones de los cuerpos
    ax1 = G * m2 * (x2 - x1) / r12 ** 3 + G * m3 * (x3 - x1) / r13 ** 3
    ay1 = G * m2 * (y2 - y1) / r12 ** 3 + G * m3 * (y3 - y1) / r13 ** 3
    ax2 = G * m1 * (x1 - x2) / r12 ** 3 + G * m3 * (x3 - x2) / r23 ** 3
    ay2 = G * m1 * (y1 - y2) / r12 ** 3 + G * m3 * (y3 - y2) / r23 ** 3
    ax3 = G * m1 * (x1 - x3) / r13 ** 3 + G * m2 * (x2 - x3) / r23 ** 3
    ay3 = G * m1 * (y1 - y3) / r13 ** 3 + G * m2 * (y2 - y3) / r23 ** 3

    # Derivadas de las variables de estado
    dx1 = vx1
    dy1 = vy1
    dvx1 = ax1
    dvy1 = ay1
    dx2 = vx2
    dy2 = vy2
    dvx2 = ax2
    dvy2 = ay2
    dx3 = vx3
    dy3 = vy3
    dvx3 = ax3
    dvy3 = ay3

    return np.array([dx1, dy1, dvx1, dvy1, dx2, dy2, dvx2, dvy2, dx3, dy3, dvx3, dvy3])

# Condiciones iniciales
x1, y1, vx1, vy1 = 0, 0, 0, 0
x2, y2, vx2, vy2 = 1, 0, 0, 2*np.pi
x3, y3, vx3, vy3 = 0.5, np.sqrt(3)/2, np.sqrt(3)/2, -np.sqrt(3)/2

# Vector de estado inicial
y0 = np.array([x1, y1, vx1, vy1, x2, y2, vx2, vy2, x3, y3, vx3, vy3])

# Tiempo de simulación
t = np.linspace(0, 10, 1000)

# Resolver el sistema de ecuaciones diferenciales con el método de Runge-Kutta de cuarto orden
sol = spi.solve_ivp(f, (t[0], t[-1]), y0, t_eval=t, rtol=1e-6, atol=1e-6)

# Graficar las trayectorias de los cuerpos
import matplotlib.pyplot as plt

plt.plot(sol.y[0], sol.y[1], label='Cuerpo 1')
plt.plot(sol.y[4], sol.y[5], label='Cuerpo 2')
plt.plot(sol.y[8], sol.y[9], label='Cuerpo 3')
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.show()

